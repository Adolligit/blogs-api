openapi: 3.0.1
info:
  title: Blogs API
  description: Nesta documentação feita com Swagger (OpenAPI), você tem amplo acesso a todas as rotas já disponíveis, assim como o resultado de um requisição, tanto positivo quanto negativo. Aleḿ do mais, você pode também testar a API diretamente por aqui, sem precisar de outro Client API. Para testar basta clicar na rota deseja e então clicar em **Try it out**.
  version: 1.0.0
  contact:
    name: Adelson
    url: https://www.linkedin.com/in/adelson-lima/
servers:
  - url: http://127.0.0.1:3000/v1
paths:
  /login:
    post:
      tags:
        - Login
      summary: Irá autenticar o usuário.
      description: Através desta requisição, é enviado o **email** e **password** para o back-end, que irá validar a existência destes dados no banco de dados e caso existam, irá retornar um Bearer Token gerado pelo JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            examples:
              1:
                value:
                  email: lewishamilton@gmail.com
                  password": 123456
              2:
                value:
                  email: michaelschumacher@gmail.com
                  password": 123456
      responses:
        200:
          description: Irá retornar um token para futuras validações, o que te garante acesso a todas as outras rotas da API.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          description: Irá retornar uma mensagem de erro sempre que uma requisição não tiver os campos necessários.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                "Sem email":
                  value:
                    message: "\"password\" is required"
                "Sem a senha":
                  value:
                    message: "\"email\" is required"
                "Campo extra":
                  value:
                    message: "\"name\" is not allowed"
        404:
          description: Irá retornar uma mensagem informando que não há um registro com os dados enviados na requisição.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: "User not found"
  /user:
    post:
      tags:
        - User
      summary: Irá registra os dados referente a um novo usuário.
      description: Quando receber os dados através de uma requisição, irá valida-los e caso o **email** já não esteja registrado, todos os dados serão registrado no banco de dados. Por fim, retornará um token criado para o novo usuário.
      requestBody:
        required: true
        description: dasdasda
        content:
          application/json:
            schema:
              type: object
              required:
                - displayName
                - email
                - password
              properties:
                displayName: 
                  type: string
                email:
                  type: string
                password:
                  type: string 
                image:
                  type: string
            examples:
              1:
                value:
                  displayName: Lewis Hamilton
                  email: lewishamilton@gmail.com
                  password: 123456
                  image: https://upload.wikimedia.org/wikipedia/commons/1/18/Lewis_Hamilton_2016_Malaysia_2.jpg
              2:
                value:
                  displayName: Michael Schumacher
                  email: michaelcchumacher@gmail.com
                  password: 123456
                  image: https://sportbuzz.uol.com.br/media/_versions/gettyimages-52491565_widelg.jpg
      responses:
        201:
          description: Irá retornar um token exclusivo para o novo usuário registrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          description: Uma mensagem de erro é retornada ao não informar um dos campos necessário, algum campo extra ou valore incorreto para determinado tipo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                "Campo extra":
                  value:
                    message: "\"easy\" is not allowed"
                "Sem o campo email":
                  value:
                    message: "\"email\" is required"
                "Sem o campo displayName":
                  value:
                    message: "\"displayName\" is required"
        409:
          description: Irá retornar uma mensagem de erro ao tentar cadastrar um usuário com o mesmo **email**.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "User already registered"
          
